/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    combos {
        compatible = "zmk,combos";

        Undo {
            bindings = <&kp LG(Z)>;
            key-positions = <15 14>;
            layers = <0 1>;
        };

        Backspace {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <20 21>;
            layers = <0 1>;
        };

        Undo_windows {
            bindings = <&kp LC(Z)>;
            key-positions = <14 15>;
            layers = <2 3>;
        };

        Backspace_word_windows {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <20 21>;
            layers = <2 3>;
        };
    };

    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings =
                <&mo>,
                <&tog>;
        };
        lh: behavior_layer_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "layer_hold_tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings =
                <&mo>,
                <&kp>;
        };
        sh_sp: behavior_shifted_key {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFTED_KEY";
            #binding-cells = <0>;
            bindings =
                <&kp SPACE>,
                <&kp UNDERSCORE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        mac_default_layer {
            bindings = <
               &kp GRAVE             &kp N1      &kp N2       &kp N3        &kp N4       &kp N5        &kp N6         &kp N7     &kp N8         &kp N9         &kp N0                          &kp F11
                 &kp TAB              &kp Q       &kp W        &kp F         &kp P        &kp G         &kp J          &kp L      &kp U          &kp Y  &kp SEMICOLON                          &kp F12
   &gqt LEFT_CONTROL ESC              &kp A       &kp R        &kp S         &kp T        &kp D         &kp H          &kp N      &kp E          &kp I          &kp O  &gqt RIGHT_CONTROL SINGLE_QUOTE
 &mt LEFT_ALT LEFT_BRACE              &kp Z       &kp X        &kp C         &kp V        &kp B         &kp K          &kp M  &kp COMMA        &kp DOT       &kp FSLH          &mt RIGHT_ALT BACKSLASH
            &kp LC(LEFT)  &kp K_APPLICATION  &kp DELETE  &skq LSHIFT  &kp LEFT_GUI       &trans        &trans    &lh 1 ENTER     &sh_sp  &kp BACKSPACE          &mo 4                    &kp LC(RIGHT)
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
        };

        mac_command_layer {
            bindings = <
                              &trans            &kp F1                &kp F2     &kp F3                 &kp F4     &kp F5                        &kp F6       &kp F7     &kp F8         &kp F9        &kp F10  &kp F11
                              &trans  &kp LA(NUMBER_3)  &kp LEFT_PARENTHESIS  &kp EQUAL  &kp RIGHT_PARENTHESIS     &trans                        &trans     &kp HOME     &kp UP        &kp END         &trans  &kp F12
 &gqt LEFT_CONTROL RIGHT_PARENTHESIS          &kp PIPE         &kp LESS_THAN  &kp MINUS       &kp GREATER_THAN  &kp TILDE                  &kp LA(LEFT)     &kp LEFT   &kp DOWN      &kp RIGHT  &kp RA(RIGHT)   &trans
            &mt LEFT_ALT RIGHT_BRACE            &trans      &kp LEFT_BRACKET   &kp PLUS      &kp RIGHT_BRACKET     &trans  &trans  &trans   &bootloader  &kp PAGE_UP  &kp ENTER  &kp PAGE_DOWN         &trans   &trans
                                                                      &trans     &trans                 &trans     &trans  &trans  &trans        &trans       &trans     &trans          &to 2
            >;

            sensor-bindings = <&inc_dec_kp LEFT RIGHT &inc_dec_kp PG_UP PG_DN>;
        };

        windows_default_layer {
            bindings = <
               &kp GRAVE                 &kp N1      &kp N2       &kp N3            &kp N4   &kp N5        &kp N6         &kp N7     &kp N8         &kp N9         &kp N0                          &kp F11
                 &kp TAB                  &kp Q       &kp W        &kp F             &kp P    &kp G         &kp J          &kp L      &kp U          &kp Y  &kp SEMICOLON                          &kp F12
       &gqt LEFT_GUI ESC                  &kp A       &kp R        &kp S             &kp T    &kp D         &kp H          &kp N      &kp E          &kp I          &kp O  &gqt RIGHT_CONTROL SINGLE_QUOTE
 &mt LEFT_ALT LEFT_BRACE                  &kp Z       &kp X        &kp C             &kp V    &kp B         &kp K          &kp M  &kp COMMA        &kp DOT       &kp FSLH          &mt RIGHT_ALT BACKSLASH
            &kp LG(LC(LEFT))  &kp K_APPLICATION  &kp DELETE  &skq LSHIFT  &kp LEFT_CONTROL   &trans        &trans    &lh 3 ENTER     &sh_sp  &kp BACKSPACE          &mo 4                &kp LG(LC(RIGHT))
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
        };

        windows_command_layer {
            bindings = <
                              &trans            &kp F1                &kp F2     &kp F3                 &kp F4     &kp F5                        &kp F6       &kp F7     &kp F8         &kp F9        &kp F10  &kp F11
                              &trans  &kp LA(NUMBER_3)  &kp LEFT_PARENTHESIS  &kp EQUAL  &kp RIGHT_PARENTHESIS     &trans                        &trans     &kp HOME     &kp UP        &kp END         &trans  &kp F12
 &gqt LEFT_CONTROL RIGHT_PARENTHESIS          &kp PIPE         &kp LESS_THAN  &kp MINUS       &kp GREATER_THAN  &kp TILDE                  &kp LC(LEFT)     &kp LEFT   &kp DOWN      &kp RIGHT  &kp RC(RIGHT)   &trans
            &mt LEFT_ALT RIGHT_BRACE            &trans      &kp LEFT_BRACKET   &kp PLUS      &kp RIGHT_BRACKET     &trans  &trans  &trans   &bootloader  &kp PAGE_UP  &kp ENTER  &kp PAGE_DOWN         &trans   &trans
                                                                      &trans     &trans                 &trans     &trans  &trans  &trans        &trans       &trans     &trans          &to 2
            >;

            sensor-bindings = <&inc_dec_kp LEFT RIGHT &inc_dec_kp PG_UP PG_DN>;
        };

        function_layer {
            bindings = <
 &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &trans  &trans  &trans  &trans  &trans  &bootloader
 &trans        &trans        &trans        &trans        &trans        &trans                  &trans  &trans  &trans  &trans  &trans       &trans
 &bt BT_CLR    &trans        &trans        &trans        &trans        &trans                  &trans  &trans  &trans  &trans  &trans       &trans
 &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans       &trans
                             &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};

&left_encoder {
    steps = <80>; // set this to be 4x triggers-per-rotation first
                  // and then if that doesn't trigger one press per detent,
                  // try 2x or 1x.
};

&right_encoder {
    steps = <80>; // set this to be 4x triggers-per-rotation first
                  // and then if that doesn't trigger one press per detent,
                  // try 2x or 1x.
};
